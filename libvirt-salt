#!/usr/bin/python

import atexit
import libvirt
import salt.client
import sys
import threading
try:
    from urlparse import urlparse
except:
    from urllib.parse import urlparse

def nth(stack, index, default=None):
    try:
        return stack[index]
    except IndexError:
        return default

domain_events_map = (
    ( 'defined', ( "added",
                   "updated",
                   "renamed",
                   "from snapshot" ) ),
    ( 'undefined', ( "removed",
                     "renamed" ) ),
    ( 'started', ( "booted",
                   "migrated",
                   "restored",
                   "snapshot",
                   "wakeup" ) ),
    ( 'suspended', ( "paused",
                     "migrated",
                     "ioerror",
                     "watchdog",
                     "restored",
                     "snapshot",
                     "api error",
                     "postcopy",
                     "postcopy failed" ) ),
    ( 'resumed', ( "unpaused",
                   "migrated",
                   "snapshot",
                   "postcopy" ) ),
    ( 'stopped', ( "shutdown",
                   "destroyed",
                   "crashed",
                   "migrated",
                   "saved",
                   "failed",
                   "snapshot" ) ),
    ( 'shutdown', ( "finished",
                    "on guest request",
                    "on host request" ) ),
    ( 'pmsuspended', ( "memory",
                       "disk" ) ),
    ( 'crashed', ( "panicked" ) )
)

def saltSendEvent(conn, objectName, event, data):
    caller = salt.client.Caller()
    uri = urlparse(conn.getURI())
    uri_tag = [uri.scheme]
    if len(uri.netloc) > 0:
        uri_tag.append(uri.netloc)
    path = uri.path.strip('/')
    if len(path) > 0:
        uri_tag.append(path)
    uriStr = "/".join(uri_tag)

    # Append some common data
    all_data = {
        'uri': conn.getURI()
    }
    all_data.update(data)

    caller.sminion.functions['event.send'](
        'libvirt/%s/%s/%s' % (uriStr, objectName, event),
        all_data
    )


def domainEventCallback (conn, dom, event, detail, opaque):
    eventStr, details = nth(domain_events_map, event, ('unknown', {}))
    detailStr = nth(details, detail, 'unknown')
    saltSendEvent(conn, dom.name(), eventStr,
        {
            'domain': {
                'name': dom.name(),
                'id': dom.ID()
            },
            'event': eventStr,
            'detail': detailStr
        }
    )

def main():
    parser = argparse.ArgumentParser(
        description="Converts libvirt events to Salt ones")
    parser.add_argument("URI", nargs="?", default="qemu:///system",
                        help="libvirt daemon URI")

    try:
        args = parser.parse_args()
        print("Connecting to %s" % args.URI)

        libvirt.virEventRegisterDefaultImpl()

        cnx = libvirt.openReadOnly(args.URI)

        def cleanup():
            print("closing %s" % cnx.getURI())
            cnx.close()

        atexit.register(cleanup)

        domcallbacks = []
        domcallbacks.append(cnx.domainEventRegisterAny(None,
                                                       libvirt.VIR_DOMAIN_EVENT_ID_LIFECYCLE,
                                                       domainEventCallback,
                                                       None))

        # TODO Add more callbacks

        def callbacksCleanup():
            for callbackId in domcallbacks:
                cnx.domainEventDeregisterAny(callbackId)

        atexit.register(callbacksCleanup)

        while True:
            libvirt.virEventRunDefaultImpl()

        sys.exit(0)
    except KeyboardInterrupt:
        sys.exit(0)

if __name__ == '__main__':
    main()
